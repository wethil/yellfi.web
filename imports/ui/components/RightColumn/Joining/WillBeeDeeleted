import React, { Component } from 'react';
import { List, ListItem } from 'material-ui/List';;
import Avatar from 'material-ui/Avatar';
import Divider from 'material-ui/Divider';
import Chip from 'material-ui/Chip';
import { grey400, grey700, darkBlack, grey800, lightBlue900 } from 'material-ui/styles/colors';
import IconMenu from 'material-ui/IconMenu';
import MenuItem from 'material-ui/MenuItem';
import IconButton from 'material-ui/IconButton';
import _ from 'lodash'
import Toggle from 'material-ui/Toggle';

 class RawJoiningList extends Component {
  constructor(props) {
    super(props);
  
    this.state = {
      count:0
    };
  }

  handleToogle(user,yell){
    if (_.includes(approved, user)==false) {
          Meteor.call('approveJoin',user,yell, error => { 
              if (error) { 
                  console.log('error', error); 
              } else {
                console.log('approveJoin')
              }                 
          });
       } else {
             Meteor.call('cancelApprove',user,yell, error => { 
              if (error) { 
                  console.log('error', error); 
              } else {
                console.log('cancelApprove')
              }           
          });
       }


  }


 


	render() {
  approved = this.props.approved
  yell = this.props.yellId
   participants = []
     
    if (this.props.requerers && this.props.requerers.length >0 ) {
        this.props.requerers.forEach((requerer) => {
         participants.push( <ListItem
                              key={requerer._id}
                              leftAvatar={<Avatar src={requerer.profile.avatar} />} 
                              primaryText={requerer.username} 
                              rightToggle={<Toggle
                                             toggled={_.includes(approved, requerer._id)}
                                              onToggle={()=>this.handleToogle(requerer._id,yell)}  
                                             /> } 
                                />)   
     });
    } else {
      participants = <ListItem primaryText="no participants" />
    }
return (

  <div style={styles.listSegment} className="comments">
      <List style={styles.list} > 
        {participants}
      </List>  
      {/* if add drawer here, it will rendered on left column itself */}
  </div>  
    
		);
	}
}



export default RawJoiningList;


     const styles = {
        list:{
          backgroundColor:'white'
        },
      username: {
        color: lightBlue900
        },
      plan: {
        color: grey800
        },
      timeDate: {
        color: grey800
        },  
       keywords:{
        fontSize:12
        },
        subhead:{
          fontSize:11,
          color:'#9E9E9E'
        },
        searchIcon:{
          color:'#B71C1C'
        },
        searchRow :{
          marginLeft:'53%'
        },
        listSegment:{
          height:'54vh',
          maxHeight:'84vh'
        }

    }